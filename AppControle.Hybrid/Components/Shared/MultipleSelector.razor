@using AppControle.Hybrid.Helpers

<div class="flex ">

    <select id="years" size="5" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
        @foreach (var item in NonSelected)
        {
            <option @onclick=@(() => Select(item))>@item.Value</option>
        }
    </select>
    <div class="">
        <div class="mx-2 my-2">
            <p><button type="button" @onclick="SelectAll">@addAllText</button></p>
        </div>
        <div class="mx-2 my-2">
            <p><button type="button" @onclick="UnselectAll">@removeAllText</button></p>
        </div>
    </div>

    <select id="years" size="5" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
        @foreach (var item in Selected)
        {
            <option @onclick=@(() => Unselect(item))>@item.Value</option>
        }
    </select>


</div>

@code {
    private string addAllText = ">>";
    private string removeAllText = "<<";

    [Parameter]
    [EditorRequired]
    public List<MultipleSelectorModel> NonSelected { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public List<MultipleSelectorModel> Selected { get; set; } = new();

    private void Select(MultipleSelectorModel item)
    {
        NonSelected.Remove(item);
        Selected.Add(item);
    }

    private void Unselect(MultipleSelectorModel item)
    {
        Selected.Remove(item);
        NonSelected.Add(item);
    }

    private void SelectAll()
    {
        Selected.AddRange(NonSelected);
        NonSelected.Clear();
    }

    private void UnselectAll()
    {
        NonSelected.AddRange(Selected);
        Selected.Clear();
    }
}
