@page "/monthlypayments"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize]

<div class="p-5 h-screen bg-gray-100">
    <div class="flex flex-column sm:flex-row flex-wrap space-y-4 sm:space-y-0 items-center justify-between pb-4">
        <div>
            <a href="/monthlypaymentsgenerate" data-dropdown-toggle="dropdownAction" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" type="button">
                <span class="sr-only">Action button</span>
                Gerar mensalidades               
            </a>

        </div>
        <div class="inline-flex rounded-md shadow-sm" role="group">

            <div class="relative">
                <div class="absolute inset-y-0 left-0 rtl:inset-r-0 rtl:right-0 flex items-center ps-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
                </div>
                <input @bind-value="Filter" type="text" id="table-search" class="block p-2 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Pesquisar clientes">
            </div>
            <button @onclick="ApplyFilterAsync"  data-dropdown-toggle="dropdownAction" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" type="button">
                Pesquisar
            </button>
        </div>

    </div>
    <p class="text-xl mb-2">Mensalidades geradas</p>

    Aqui vai ser uma tabela com todas as mensalidades geradas de um selecionado mes
    @* <!-- Tabela -->
    <div class="relative overflow-x-auto rounded-lg shadow hidden md:block">
        <GenericList MyList="lClients">
        <Body>
        <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3">
                        Nome
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Data de registro
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Saldo
                    </th>
                    <th scope="col" class="px-6 py-3">
                    
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var client in lClients!)
                {
                    <tr>
                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    @client.Name
                        </th>
                        <td class="px-6 py-4">
                                    @client.RegisterDate
                        </td>
                        <td class="px-6 py-4">
                                    @client.Balance.ToString("C")
                        </td>
                        <td class="px-6 py-4">
                                    <a href="/clients/details/@client.Id" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Detalhar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        </Body>
        </GenericList>
    </div>

    <!-- Box -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:hidden">
        <GenericList MyList="lClients">
        <Body>
        @foreach (var client in lClients!)
        {
            <div class="bg-white space-y-3 p-4 rounded-lg shadow">
                <div class="flex items-center space-x-2 text-sm">
                    <div>
                                <a href="#" class="text-gray-500">Registro:</a>
                    </div>
                    <div class="text-gray-500">@client.RegisterDate</div>

                </div>
                <div class="text-sm text-gray-700">
                    @client.Name
                </div>
                <div class="text-sm font-medium text-black">
                    Saldo: @client.Balance.ToString("C")
                </div>
                <a href="/clients/details/@client.Id" class="mt-2 font-bold text-blue-500 hover:underline">Detalhar</a>
            </div>
        }      
        </Body>
        </GenericList>
    </div>

    <Pagination CurrentPage="CurrentPage"
                QuantityTotalPages="TotalPages"
                Ray="2"
                SelectedPage="SelectedPageAsync" /> *@
</div>



@code {
    private int CurrentPage = 1;
    private int TotalPages;
    // public List<Client>? lClients { get; set; }
    public string Filter = string.Empty;

    // protected override async Task OnInitializedAsync()
    // {
    //     await LoadAsync();
    // }

    private async Task LoadAsync(int page = 1, int quantityPerPage = 5)
    {
    //     try
    //     {
    //         var responseHttp = await repository.Get<List<Client>>($"/api/clients?Page={page}&QuantityPerPage={quantityPerPage}&filter={Filter}");
    //         if (!responseHttp.Error)
    //         {
    //             TotalPages = responseHttp.TotalPages;
    //             lClients = responseHttp.Response;
    //         }
    //     }
    //     catch (Exception e)
    //     {
    //         await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //     }

    }

    private async Task SelectedPageAsync(int page)
    {
        CurrentPage = page;
        await LoadAsync(page);
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}