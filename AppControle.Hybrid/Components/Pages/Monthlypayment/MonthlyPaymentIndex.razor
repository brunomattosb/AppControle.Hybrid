@page "/monthlypayments"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize]

<div class="p-5 bg-gray-100">
    <div class="flex flex-column sm:flex-row flex-wrap space-y-4 sm:space-y-0 items-center justify-between pb-4">
        <div>
            <a href="/monthlypayments/generate" data-dropdown-toggle="dropdownAction" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" type="button">
                <span class="sr-only">Action button</span>
                Gerar mensalidades
            </a>

        </div>

        <div>
            <label for="Month" class="block text-sm font-medium leading-6 text-gray-900">Selecione o mês</label>
            <InputDate name="Month" id="Month"  @bind-Value="selectedDate" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
        </div>


        <div class="inline-flex rounded-md shadow-sm" role="group">

            <div class="relative">
                <div class="absolute inset-y-0 left-0 rtl:inset-r-0 rtl:right-0 flex items-center ps-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
                </div>
                <input @bind-value="Filter" type="text" id="table-search" class="block p-2 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Pesquisar clientes">
            </div>
            <button @onclick="ApplyFilterAsync" data-dropdown-toggle="dropdownAction" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" type="button">
                Pesquisar
            </button>
        </div>

    </div>
    <p class="text-xl mb-2">Mensalidades geradas</p>

    <!-- Tabela -->
    <div class="relative overflow-x-auto rounded-lg shadow hidden md:block">
        <GenericList MyList="lMonthlyFee">
            <Body>
                <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3">
                                Cliente
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Data de referência
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Valor
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Status
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Data de vencimento
                            </th>

                            <th scope="col" class="px-6 py-3">
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var monthlyfee in lMonthlyFee!)
                        {
                            <tr>
                                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    @monthlyfee.Client!.Name
                                </th>
                                <td class="px-6 py-4">
                                    @monthlyfee.Reference!.Value.Date
                                </td>
                                <td class="px-6 py-4">
                                    @monthlyfee.Value.ToString("C")
                                </td>
                                <th scope="col" class="px-6 py-3 text-gray-700 whitespace-nowrap">
                                    @if(monthlyfee.Payday == null)
                                    {
                                        <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-gray-800 bg-gray-200 rounded-lg bg-opacity-50">A Pagar</span>
                                    }
                                    else
                                    {
                                        <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50">Pago</span>
                                    }
                                </th>
                                <td class="px-6 py-4">
                                    @monthlyfee.DueDate!.Value.Date
                                </td>
                                <td class="px-6 py-4">
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

            </Body>
        </GenericList>
    </div>
    <!-- Box -->
    <GenericList MyList="lMonthlyFee">
        <Body>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:hidden">
        @foreach (var monthlyfee in lMonthlyFee!)
        {
            <div class="bg-white space-y-3 p-4 rounded-lg shadow">
                <div class="flex items-center space-x-2 text-sm">

                    <div class="text-gray-500">Venc. @monthlyfee.DueDate!.Value.Date</div>
                    <div>
                        @if (monthlyfee.Payday == null)
                        {
                            <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-gray-800 bg-gray-200 rounded-lg bg-opacity-50">A Pagar</span>
                        }
                        else
                        {
                            <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50">Pago</span>
                        }
                    </div>
                </div>
                <div class="flex items-center space-x-2 text-sm">

                    @if(monthlyfee.Payday! != null){

                        <div class="text-gray-500">Pago. @monthlyfee.Payday!.Value.Date</div>
                    }
         
                </div>
                <div class="text-sm text-gray-700">
                    @monthlyfee.Client!.Name
                </div>
                <div class="text-sm font-medium text-black">
                    @monthlyfee.Value.ToString("C")
                </div>
            </div>
        } 
        </div>
    </Body>
        </GenericList>
    <Pagination CurrentPage="CurrentPage"
                QuantityTotalPages="TotalPages"
                Ray="2"
                SelectedPage="SelectedPageAsync" />

    @if (lMonthlyFee is null)
    {
        <div class="text-center">
            <div role="status">
                <svg aria-hidden="true" class="inline w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                    <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
                </svg>
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        if (lMonthlyFee.Count != 0 && currentDate is not null)
        {

            <div class="mt-5 grid-cols-1 flex justify-start pe-3 sm:pe-5 ms-2">
                <h2 class="text-xl font-bold leading-7 text-gray-900">Relatório do mês @currentDate!.Value.Month/@currentDate.Value.Year</h2>
            </div>

            <div class="space-y-12  pe-3 sm:pe-5 ps-3 sm:ps-5 mt-5">
                <div class="border-b border-t border-gray-900/10 pb-12 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-2">
                    <div class="md:col-span-1">
                        <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Valor total:</label>
                        <label class="">@resume?.total.ToString("C")</label>
                    </div>

                    <div class="md:col-span-1">
                        <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Total pago: </label>
                        <label class="">@resume?.totalPayment</label>
                    </div>
                    <div class="md:col-span-1">
                        <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Total a pagar</label>
                        <label class="">@resume?.totalPayable</label>
                    </div>
                    @*
            

            

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Email</label>
            <label class="">@client.Email</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Nome Fantasia</label>
            <label class="">@client.FantasyName</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Endereço</label>
            <label class="">@client.Address @client.AddressNumber, @client.City!.Name, @client.City.State!.Name, @client.City.State.Country!.Name</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">CEP</label>
            <label class="">@client.AddressCep</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Comentário</label>
            <label class="">@client.Remarks</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Data de Nascimento</label>
            <label class="">@client.BirthData</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Gênero</label>
            <label class="">@client.Gender</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Bairro</label>
            <label class="">@client.Neighborhood</label>
            </div>

            <div class="md:col-span-1">
            <label for="cpf_cnpj" class="block text-sm font-medium leading-6 text-gray-900">Telefone</label>
            <label class="">@client.PhoneNumber</label>
            </div>

            <div class="md:col-span-1">
            <label class="form-label fw-bold">Saldo</label>
            <label class="">@($"{client.Balance:C2}")</label>
            </div>

            <div class="md:col-span-1">
            <label class="form-label fw-bold">Mensalidade</label>
            <label class="">@($"{client.MonthlyPayment:C2}")</label>
            </div>*@

                </div>
            </div>
        }
    }
</div>



@code {
    private DateTime? selectedDate = DateTime.Now;
    private DateTime? currentDate = DateTime.Now;

    private int CurrentPage = 1;
    private int TotalPages;
    public List<MonthlyFee>? lMonthlyFee { get; set; }
    private MonthlyFeeResumeDTO? resume;
    public string Filter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private void OnBlurAsync(FocusEventArgs args)
    {
        // Lógica a ser executada quando o campo perde o foco
        Console.WriteLine("Campo perdeu o foco");
    }
    private async Task LoadAsync(int page = 1, int quantityPerPage = 5)
    {
        try
        {
            lMonthlyFee = null;
            resume = null;
            var responseHttp = await repository.Get<List<MonthlyFee>>($"/api/monthlyfees?Page={page}&QuantityPerPage={quantityPerPage}&filter={Filter}&month={selectedDate!.Value.Month}&year={selectedDate!.Value.Year}");
            if (!responseHttp.Error)
            {
                TotalPages = responseHttp.TotalPages;
                lMonthlyFee = responseHttp.Response;
            }
            //Resumo
            var resumeResponse = await repository.GetNoPage<MonthlyFeeResumeDTO>($"/api/monthlyfees/resume?month={selectedDate!.Value.Month}&year={selectedDate!.Value.Year}");
            if (!resumeResponse.Error)
            {
                resume = resumeResponse.Response;
            }
        }
        catch (Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }
    private async Task SelectedPageAsync(int page)
    {
        CurrentPage = page;
        await LoadAsync(page);
    }

    private async Task ApplyFilterAsync()
    {
        currentDate = selectedDate;
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}