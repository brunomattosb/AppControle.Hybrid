@* @page "/users"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (lUsers is null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="lUsers">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-people"></i> Usuarios
                        <a class="btn btn-sm btn-primary float-end" href="/register/?IsAdmin=true"><i class="oi oi-plus"></i> Adicionar Administrador</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                        <div>
                            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar usuario..." @bind-value="Filter" />
                        </div>
                        <div class="mx-1">
                            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                        </div>
                    </div>

                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Imagén</th>
                                <th>Usuario</th>
                                <th>Documento</th>
                                <th>Teléfono</th>
                                <th>Email</th>
                                <th>Dirección</th>
                                <th>Confirmado</th>
                                <th>Tipo Usuario</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in lUsers)
                            {
                                <tr>
                                    <td><img src="@user.Photo" width="80" height="80" style="border-radius:50%" /></td>
                                    <td>@user.Name</td>
                                    <td>@user.Cpf_Cnpj</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.Email</td>
                                    <td>@user.Address, @user.City!.Name</td>
                                    <td>@user.EmailConfirmed</td>
                                    <td>@user.UserType</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
    <Pagination CurrentPage="CurrentPage"
                QuantityTotalPages="TotalPages"
                Ray="2"
                SelectedPage="SelectedPageAsync" />
}

@code {
    public List<User>? lUsers { get; set; }
    private int CurrentPage = 1;
    private int TotalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected async override Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPageAsync(int page)
    {
        CurrentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1, int QuantityPerPage = 5)
    {

        try
        {

            var responseHttp = await repository.Get<List<User>>($"/api/accounts/all?Page={page}&QuantityPerPage={QuantityPerPage}&filter={Filter}");
            if (!responseHttp.Error)
            {
                TotalPages = responseHttp.TotalPages;
                lUsers = responseHttp.Response;

            }
        }
        catch (Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }
    }

    private async Task ApplyFilterAsync()
    {
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await LoadAsync();
    }
}
 *@