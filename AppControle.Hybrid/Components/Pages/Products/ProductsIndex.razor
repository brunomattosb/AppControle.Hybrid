@page "/products"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize]

<div class="p-5 bg-gray-100 h-full w-full">
    <div class="flex flex-column sm:flex-row flex-wrap space-y-4 sm:space-y-0 items-center justify-between pb-4">
        <div>
            <a href="/products/create" data-dropdown-toggle="dropdownAction" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" type="button">
                <span class="sr-only">Action button</span>
                Adicionar Produto
            </a>

        </div>
        <div class="inline-flex rounded-md shadow-sm" role="group">

            <div class="relative">
                <div class="absolute inset-y-0 left-0 rtl:inset-r-0 rtl:right-0 flex items-center ps-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-500 dark:text-gray-400" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg>
                </div>
                <input @bind-value="Filter" type="text" id="table-search" class="block p-2 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg w-80 bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Pesquisar produto">
            </div>
            <button @onclick="ApplyFilterAsync" data-dropdown-toggle="dropdownAction" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" type="button">
                Pesquisar
            </button>
        </div>

    </div>
    <p class="text-xl mb-2">Clientes</p>

    <GenericList MyList="lProducts">
    <Body>
    <!-- Tabela -->
    <div class="relative overflow-x-auto rounded-lg shadow hidden md:block">
        
        <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                <tr>
                    <th scope="col" class="px-6 py-3">
                                
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Descrição
                    </th>
                    <th scope="col" class="px-6 py-3">
                        Estoque
                    </th>
                    @* <th scope="col" class="px-6 py-3">
                        Serviço?
                    </th> *@
                    <th scope="col" class="px-6 py-3">
                        Ativo?
                    </th>
                    <th scope="col" class="px-6 py-3">
                                
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Product in lProducts)
                {
                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                        <th scope="row" class="flex items-center px-6 py-4 text-gray-900 whitespace-nowrap dark:text-white">
                            <img src="@Product.MainImage" class="w-8 h-8 rounded-full" alt="dropdown image" />
                            <div class="ps-3">
                                <div class="text-base font-semibold">@Product.Name</div>
                                <div class="font-normal text-gray-500">@Product.Price.ToString("C")</div>
                            </div>
                        </th>
                        <td class="px-6 py-4">
                            @Product.Description
                        </td>
                        <td class="px-6 py-4">
                            @Product.Stock
                        </td>
                        @* <td class="w-4 p-4">

                            <div class="flex items-center">
                                <InputCheckbox disabled id="checkbox-table-search-1" @bind-Value="@Product.IsService" class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                                <label for="checkbox-table-search-1" class="sr-only">checkbox</label>
                            </div>
                        </td> *@
                        <td class="w-4 p-4">
                            @if (Product.IsActive)
                            {
                                <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50">Ativo</span>
                            }
                            else
                            {
                                <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-gray-800 bg-gray-200 rounded-lg bg-opacity-50">Desativado</span>
                            }
                        </td>

                        <td class="px-6 py-4">
                            <a href="/products/details/@Product.Id" type="button" data-modal-target="editUserModal" data-modal-show="editUserModal" class="font-medium text-blue-600 dark:text-blue-500 hover:underline">Detalhar</a>
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
    <!-- Box -->
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:hidden ">
        @foreach (var Product in lProducts)
        {
         
            <div class="w-full max-w-sm bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700"> 
           
                <img class="p-8 rounded-t-sm w-36 h-36" src="@Product.MainImage" alt="product image" />
                
            <div class="px-5 pb-5">
                <p>
                            <h5 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-white">@Product.Name</h5>
                </p>
                <div class="flex items-center mt-2.5 mb-5 space-x-1">
                    <p>
                        <h5 class="text-xl font-semibold tracking-tight text-gray-900 dark:text-white">@Product.Description</h5>
                    </p>
                    @if (Product.IsActive)
                    {
                        <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50">Ativo</span>
                    }
                    else 
                    {
                        <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-gray-800 bg-gray-200 rounded-lg bg-opacity-50">Desativado</span>
                    }
                </div>
                <div class="flex items-center justify-between">
                    <span class="text-3xl font-bold text-gray-900 dark:text-white">@Product.Price.ToString("C")</span>
                            <a href="/products/details/@Product.Id" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Detalhar</a>
                </div>
                </div> 
            </div>
        }           
    </div>
    </Body>
    </GenericList>

    <Pagination CurrentPage="CurrentPage"
                QuantityTotalPages="TotalPages"
                Ray="2"
                SelectedPage="SelectedPageAsync" />
</div>



@code {
    private int CurrentPage = 1;
    private int TotalPages;
    public List<Product> lProducts { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1, int QuantityPerPage = 5)
    {

        try
        {

            var responseHttp = await repository.Get<List<Product>>($"/api/products?Page={page}&QuantityPerPage={QuantityPerPage}&filter={Filter}");
            if (!responseHttp.Error)
            {
                TotalPages = responseHttp.TotalPages;
                lProducts = responseHttp.Response;

            }
        }
        catch (Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }


    }

    private async Task Delete(int productId)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/products/{productId}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await LoadAsync(1);
    }

    private async Task SelectedPageAsync(int page)
    {
        CurrentPage = page;
        await LoadAsync(page);
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }
}
