@* @inject IRepository repository
@inject SweetAlertService sweetAlertService


<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmitCategory">
    <DataAnnotationsValidator />
    <div class="mt-2 grid-cols-1 flex justify-end pe-3 sm:pe-5 mb-2 space-x-1">

        <h2 class="text-xl font-bold leading-7 text-gray-900">Criar nova categoria</h2>
    </div>
    <form class="mt-2 space-y-12 pe-3 sm:pe-5 ps-3 sm:ps-5">
        
        <div class="border-b border-t border-gray-900/10 pb-12">
            <div class="grid mt-10 ">
                <label for="Name" class="block text-sm font-medium leading-6 text-gray-900">* Categoria</label>
                <div class="mt-2">
                    <InputText name="Name" id="Name" @bind-Value="@Category.Name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                    <ValidationMessage class="text-red-500 font-bold" For="@(() => Category.Name)" />
                </div>
            </div>
        </div>
    </form>
    <div class="mt-6 flex items-center justify-end gap-x-6 mb-5 me-5">
        <button type="button" @onclick="ReturnAction" class="text-sm font-semibold leading-6 text-gray-900">Voltar</button> 
        <button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Criar</button>
    </div>

</EditForm>  

@code {

    [Parameter]
    public List<Category> lCategory { get; set; } = null!;

    public Category Category { get; set; } = new()!;

    private EditContext editContext = null!;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override void OnInitialized()
    {
        editContext = new(Category);
    }
    private async void OnValidSubmitCategory()
    {
        var httpResponse = await repository.Post("/api/Categories", Category);

        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        else
        {
            //TODO: Unificar Toast
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = true,
                    Timer = 5000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Categoria adicionada com sucesso!");
            Category.Name = "";
        }
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }
    private async void DeleteCategory(string name, int categoryId)
    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmaçao",
                Text = string.Format("Deseja excluir a categoria {0}?", name),
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Não",
                ConfirmButtonText = "Sim"
            });

        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{categoryId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        else
        {
            lCategory.Remove(lCategory.Where(x => x.Id == categoryId).FirstOrDefault()!);
            StateHasChanged();
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = true,
                    Timer = 5000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Categoria excluida!");
        }
    }
    private async void ReturnAction()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }
}   *@