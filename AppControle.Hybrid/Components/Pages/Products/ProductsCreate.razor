@page "/products/create"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize]



<div class="grid grid-cols-2">
    <div class="mt-5 grid-cols-1 flex justify-start pe-3 sm:pe-5 ms-2">
        <span>
            <a class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" href="/Products">
                <iconify-icon icon="mingcute:back-2-line"></iconify-icon> Voltar
            </a>
        </span>
    </div>

    <div class="mt-5 grid-cols-1 flex justify-end pe-3 sm:pe-5 mb-2 space-x-1">

        <h2 class="text-xl font-bold leading-7 text-gray-900">Novo serviço</h2>
    </div>
    @* <div class="mt-5 grid-cols-1 flex justify-end pe-3 sm:pe-5 mb-2 space-x-1">
        <div @onclick=@(() => EditAsync())>
            <a class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                Editar
            </a>
        </div>
        <div @onclick=@(() => DeleteAsync())>
            <a class="rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                Excluir
            </a>
        </div>
    </div> *@
</div>

<ProductForm @ref="productForm" ProductDTO="productDTO"  OnValidSubmit="CreateAsync" ReturnAction="Return" />


@code {
    private ProductDTO productDTO = new ProductDTO
    {
        ProductCategoryIds = new List<int>(),
        ProductImages = new List<string>()
    };

    private ProductForm? productForm;

    private async Task CreateAsync()
    {
        if (productForm?.imageBase64 is not null)
        {
            productDTO.ProductImages!.Add(productForm.imageBase64);
        }
        
        productDTO.IsService = true;
        productDTO.Stock = 0;

        var httpResponse = await repository.Post("/api/products", productDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        else
        {
            //TODO: Unificar Toast
            var toast = sweetAlertService.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.TopEnd,
                    ShowConfirmButton = true,
                    Timer = 5000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Produto adicionado com sucesso!");
        }

        Return();
    }

    private void Return()
    {
        productForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/products");
    }
}