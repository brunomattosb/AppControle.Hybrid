@page "/monthlyfee/create"
@using System.Globalization
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize]

<div class="p-5 bg-gray-100 h-screen">
    <div class="grid grid-cols-2">
        <div class="mt-5 grid-cols-1 flex justify-start pe-3 sm:pe-5 ms-2">
            <span>
                <a class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600" href="/monthlyfee">
                    <iconify-icon icon="mingcute:back-2-line"></iconify-icon> Voltar
                </a>
            </span>
        </div>

        <div class="mt-5 grid-cols-1 flex justify-end pe-3 sm:pe-5 mb-2 space-x-1">
            <h2 class="text-xl font-bold leading-7 text-gray-900">Gerar mensalidades</h2>
        </div>
    </div>

    <div class="grid grid-cols-1">

        <div class="mt-5 grid-cols-1 flex justify-end pe-3 sm:pe-5 mb-2 space-x-1">
            <div class="">
                <label for="reference" class="block text-sm font-medium leading-6 text-gray-900">Referência</label>
                <div class="mt-2">
                    <InputDate id="inputBirth" @bind-Value="@ReferenceDate" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                </div>
            </div>
            <div class="">
                <label for="name" class="block text-sm font-medium leading-6 text-gray-900">Vencimento</label>
                <div class="mt-2">
                    <InputDate id="inputBirth" @bind-Value="@DueDate" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                </div>
            </div>
        </div>
    </div>



    <GenericList MyList="lMonthlyFeeCreateDTO">
        <Body>
            <!-- Tabela -->
            <div class="relative overflow-x-auto rounded-lg shadow hidden md:block">

                <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3">
                                <div class="flex items-center h-5">
                                    <InputCheckbox id="selectedAll" @bind-Value="selectedAll" @oninput="HandleCheckboxChange" class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800" />
                                </div>
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Cliente
                            </th>
                            <th scope="col" class="px-6 py-3">
                                Valor
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var MonthlyFeeCreateDTO in lMonthlyFeeCreateDTO!)
                        {
                            <tr>
                                <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    <div class="flex items-center h-5">
                                        <input id="selectedAll" type="checkbox" value="" class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-blue-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800" required>
                                    </div>
                                </th>
                                <td class="px-6 py-4">
                                    @MonthlyFeeCreateDTO.Name
                                </td>
                                <td class="px-6 py-4">
                                    @MonthlyFeeCreateDTO.Value.ToString("C")
                                </td>
   
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Box -->
            @* <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:hidden">
            @foreach (var client in lClients!)
            {
            <div class="bg-white space-y-3 p-4 rounded-lg shadow">
            <div class="flex items-center space-x-2 text-sm">
            <div>
            <a href="#" class="text-gray-500">Registro:</a>
            </div>
            <div class="text-gray-500">@client.RegisterDate</div>
            <div>
            <span class="p-1.5 text-xs font-medium uppercase tracking-wider text-green-800 bg-green-200 rounded-lg bg-opacity-50">Delivered</span>
            </div>
            </div>
            <div class="text-sm text-gray-700">
            @client.Name
            </div>
            <div class="text-sm font-medium text-black">
            Mensalidade: @client.ServicesValue.ToString("C")
            </div>
            <a href="/clients/details/@client.Id" class="mt-2 font-bold text-blue-500 hover:underline">Detalhar</a>
            </div>
            }
            </div> *@
        </Body>
    </GenericList>


    <div class="mt-6 flex items-center justify-end gap-x-6 mb-5 me-5">
        <button type="button" @onclick="Return" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
        <button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Gerar</button>
    </div>


</div>

@code {
    private List<MonthlyFeeCreateDTO> lMonthlyFeeCreateDTO = new();
    private DateTime? selectedDate = DateTime.Now;
    private DateTime ReferenceDate = DateTime.Now;
    private DateTime DueDate = DateTime.Now;
    private bool selectedAll;
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private void HandleCheckboxChange(ChangeEventArgs e)
    {
        selectedAll = (bool)e.Value;
        // Lógica que você deseja executar quando o checkbox é alterado
        Console.WriteLine("Checkbox foi alterado!");

        // O valor atualizado do checkbox é passado diretamente como um bool
        // 

        // Se precisar do valor do checkbox, você pode usar a propriedade isChecked
        Console.WriteLine($"Novo valor do checkbox: {selectedAll}");
    }
    private async Task LoadAsync()
    {
        try
        {
            var responseHttp = await repository.GetNoPage<List<MonthlyFeeCreateDTO>>($"/api/monthlyfees/getvaluesmonthlyfees?month={selectedDate!.Value.Month}&year={selectedDate!.Value.Year}");
            if (!responseHttp.Error)
            {
                lMonthlyFeeCreateDTO = responseHttp.Response;
            }
        }
        catch (Exception e)
        {
            await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
        }

    }
    private async Task CreateAsync()
    {

        // var httpResponse = await repository.Post("/api/clients", Client);
        // if (httpResponse.Error)
        // {
        //     var message = await httpResponse.GetErrorMessageAsync();
        //     await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //     return;
        // }
        // else
        //     await sweetAlertService.FireAsync("Sucesso!", "Client salvo!", SweetAlertIcon.Success);
    }


    private void Return()
    {

    }
}
