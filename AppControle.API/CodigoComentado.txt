[HttpPost("addImages")]
public async Task<ActionResult> PostAddImagesAsync(ImageDTO imageDTO)
{
    var product = await _context.Products
        .Include(x => x.lProductImages)
        .FirstOrDefaultAsync(x => x.Id == imageDTO.ProductId);
    if (product == null)
    {
        return NotFound();
    }

    if (product.lProductImages is null)
    {
        product.lProductImages = new List<ProductImage>();
    }

    for (int i = 0; i < imageDTO.Images.Count; i++)
    {
        if (!imageDTO.Images[i].StartsWith("https://sales2023.blob.core.windows.net/products/"))
        {
            var photoProduct = Convert.FromBase64String(imageDTO.Images[i]);
            imageDTO.Images[i] = await _fileStorage.SaveFileAsync(photoProduct, ".jpg", "products");
            product.lProductImages!.Add(new ProductImage { Image = imageDTO.Images[i] });
        }
    }

    _context.Update(product);
    await _context.SaveChangesAsync();
    return Ok(imageDTO);
}

[HttpPost("removeLastImage")]
public async Task<ActionResult> PostRemoveLastImageAsync(ImageDTO imageDTO)
{
    var product = await _context.Products
        .Include(x => x.lProductImages)
        .FirstOrDefaultAsync(x => x.Id == imageDTO.ProductId);
    if (product == null)
    {
        return NotFound();
    }

    if (product.lProductImages is null || product.lProductImages.Count == 0)
    {
        return Ok();
    }

    var lastImage = product.lProductImages.LastOrDefault();
    await _fileStorage.RemoveFileAsync(lastImage!.Image, "products");
    product.lProductImages.Remove(lastImage);
    _context.Update(product);
    await _context.SaveChangesAsync();
    imageDTO.Images = product.lProductImages.Select(x => x.Image).ToList();
    return Ok(imageDTO);
}



