[HttpPost("addImages")]
public async Task<ActionResult> PostAddImagesAsync(ImageDTO imageDTO)
{
    var product = await _context.Products
        .Include(x => x.lProductImages)
        .FirstOrDefaultAsync(x => x.Id == imageDTO.ProductId);
    if (product == null)
    {
        return NotFound();
    }

    if (product.lProductImages is null)
    {
        product.lProductImages = new List<ProductImage>();
    }

    for (int i = 0; i < imageDTO.Images.Count; i++)
    {
        if (!imageDTO.Images[i].StartsWith("https://sales2023.blob.core.windows.net/products/"))
        {
            var photoProduct = Convert.FromBase64String(imageDTO.Images[i]);
            imageDTO.Images[i] = await _fileStorage.SaveFileAsync(photoProduct, ".jpg", "products");
            product.lProductImages!.Add(new ProductImage { Image = imageDTO.Images[i] });
        }
    }

    _context.Update(product);
    await _context.SaveChangesAsync();
    return Ok(imageDTO);
}

[HttpPost("removeLastImage")]
public async Task<ActionResult> PostRemoveLastImageAsync(ImageDTO imageDTO)
{
    var product = await _context.Products
        .Include(x => x.lProductImages)
        .FirstOrDefaultAsync(x => x.Id == imageDTO.ProductId);
    if (product == null)
    {
        return NotFound();
    }

    if (product.lProductImages is null || product.lProductImages.Count == 0)
    {
        return Ok();
    }

    var lastImage = product.lProductImages.LastOrDefault();
    await _fileStorage.RemoveFileAsync(lastImage!.Image, "products");
    product.lProductImages.Remove(lastImage);
    _context.Update(product);
    await _context.SaveChangesAsync();
    imageDTO.Images = product.lProductImages.Select(x => x.Image).ToList();
    return Ok(imageDTO);
}




    [HttpPost("Login")]
    public async Task<ActionResult> Login([FromBody] LoginDTO model)
    {
        var user = await _userManager.FindByEmailAsync(model.Email);


        if (user is not null && await _userManager.CheckPasswordAsync(user, model.Password!)) 
        {
            var roles = await _userManager.GetRolesAsync(user);

            //TODO:Verificar claims
            var lclaims = new List<Claim>
                {
                    new Claim(ClaimTypes.Email, user.Email!),
                    new Claim(ClaimTypes.Role, user.UserType.ToString()),
                    //new Claim("Document", user.Cpf_Cnpj!),
                    new Claim(ClaimTypes.Name, user.Name!),
                    new Claim(ClaimTypes.Sid, user.Id),
                    //new Claim("Address", user.Address!),
                    new Claim("Photo", user.Photo ?? string.Empty),
                    new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                    //new Claim("CityId", user.CityId.ToString())
            };

            foreach (var role in roles)
            {
                lclaims.Add(new Claim(ClaimTypes.Role, role));
            }

            var token = _tokenService.GenerateAccessToken(lclaims, _configuration);

            var refreshToken = _tokenService.GenerateRefreshToken();

            _ = int.TryParse(_configuration["JWT:RefreshTokenValidityInMinutes"],
                               out int refreshTokenValidityInMinutes);

            user.RefreshTokenExpiryTime =
                            DateTime.Now.AddMinutes(refreshTokenValidityInMinutes);

            user.RefreshToken = refreshToken;

            await _userManager.UpdateAsync(user);

            return Ok(new
            {
                Token = new JwtSecurityTokenHandler().WriteToken(token),
                RefreshToken = refreshToken,
                Expiration = token.ValidTo
            });
        }
        return Unauthorized();
    }
    [HttpPost]
    [Route("register")]
    public async Task<IActionResult> Register([FromBody] RegisterDTO model)
    {
        //TODO: Verificar isso aqui..
        // VERIFICAR ESSE CODIGO

        var userExists = await _userManager.FindByEmailAsync(model.Email!);

        if (userExists != null)
        {
            return StatusCode(StatusCodes.Status500InternalServerError,
                   new Response { IsSuccess = false , Message = "Usuario já cadastrado!" });
        }
        User user = model;
        user.SecurityStamp = Guid.NewGuid().ToString();

        user.EmailConfirmed = false;
        user.PhoneNumberConfirmed = false;
        user.TwoFactorEnabled = false;

        user.UserType = UserType.User;
        try
        {
            var result = await _userManager.CreateAsync(user, model.Password!);

            //if (!string.IsNullOrEmpty(model.Photo))
            //{
            //    var photoUser = Convert.FromBase64String(model.Photo);
            //    model.Photo = await _fileStorage.SaveFileAsync(photoUser, ".jpg", _container);
            //}
            if (result.Succeeded)
            {

                await _userManager.AddToRoleAsync(user, user.UserType.ToString());

                var myToken = await _userManager.GenerateEmailConfirmationTokenAsync(user);

                var tokenLink = Url.Action("ConfirmEmail", "accounts", new
                {
                    userid = user.Id,
                    token = myToken
                }, HttpContext.Request.Scheme, _configuration["UrlWEB"]);

                var response = _mailHelper.SendMail(user.Name, user.Email!,
                    $"Confirmação de conta Automações Brasil",
                    $"<h1>Automações Brasil - Confirmação de conta</h1>" +
                    $"<p>Para habilitar o usuário, por valor clique em 'Confirmar Email':</p>" +
                    $"<b><a href ={tokenLink}>Confirmar Email</a></b>");

                if (response.IsSuccess)
                {
                    return Ok(new Response { IsSuccess = true,Message = "Usuario criado com sucesso!!" });
                }

                return BadRequest(response.Message);
            }
        }
        catch (DbUpdateException e)
        {
            if (e.InnerException!.Message.Contains("Duplicate"))
            {
                return BadRequest("O CPF / CNPJ informado já possui cadastro.");
            }
            return BadRequest(e.InnerException.Message);
        }
        catch (Exception e)
        {
            if (e.Message.Contains("DuplicateEmail") || e.Message.Contains("DuplicateUserName"))
            {
                return BadRequest("O CPF / CNPJ informado já possui cadastro.");
            }

            return BadRequest(e.Message);
        }
        return StatusCode(StatusCodes.Status500InternalServerError,
                       new Response { IsSuccess = false, Message = "Não foi possivel completar seu cadastro, confira os dados informados!" });
    }

    [HttpPost]
    [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    [Route("refresh-token")]
    public async Task<IActionResult> RefreshToken(TokenDTO tokenDTO)
    {

        if (tokenDTO is null)
        {
            return BadRequest("Requisição inválida");
        }

        string? accessToken = tokenDTO.Token
                              ?? throw new ArgumentNullException(nameof(tokenDTO));

        string? refreshToken = tokenDTO.RefreshToken
                               ?? throw new ArgumentException(nameof(tokenDTO));

        var principal = _tokenService.GetPrincipalFromExpiredToken(accessToken!, _configuration);

        if (principal == null)
        {
            return BadRequest("Token de acesso inválido");
        }

        string email = principal.FindFirstValue(ClaimTypes.Email)!;

        var user = await _userManager.FindByEmailAsync(email!);

        if (user == null || user.RefreshToken != refreshToken
                         || user.RefreshTokenExpiryTime <= DateTime.Now)
        {
            return BadRequest("Token de acesso inválido");
        }

        var newAccessToken = _tokenService.GenerateAccessToken(
                                           principal.Claims.ToList(), _configuration);

        var newRefreshToken = _tokenService.GenerateRefreshToken();

        user.RefreshToken = newRefreshToken;

        await _userManager.UpdateAsync(user);

        return Ok(new ObjectResult(new
        {
            accessToken = new JwtSecurityTokenHandler().WriteToken(newAccessToken),
            refreshToken = newRefreshToken
        }));
    }

    [Authorize(Roles ="Admin")]
    [HttpPost]
    [Route("revoke/{email}")]
    public async Task<IActionResult> Revoke(string email)
    {
        var user = await _userManager.FindByEmailAsync(email);

        if (user == null) 
            return BadRequest("Email inválido.");

        user.RefreshToken = null;

        await _userManager.UpdateAsync(user);

        return NoContent();
    }