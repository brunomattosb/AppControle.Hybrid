<nav aria-label="Paginacao" class="mt-2 ">
    <ul class="flex items-center -space-x-px h-8 text-sm">
        @foreach (var link in links)
        {
            <li @onclick="@(() => selectedPageLink(link))"
                class="@(link.Active ? "text-blue-600 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:bg-gray-700 dark:text-white":" hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800  dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white border-gray-300 leading-tight text-gray-500 bg-white ") flex items-center justify-center px-3 h-8 border border-gray-300 dark:border-gray-700">
                <span class="" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {

    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int QuantityTotalPages { get; set; }
    [Parameter] public int Ray { get; set; } = 3;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    List<LinkModel> links;

    class LinkModel
    {
        public LinkModel(int page) : this(page, true)
        { }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString())
        { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }

    private async Task selectedPageLink(LinkModel link)
    {
        //se clicar na pagina atual não faz nada
        if (link.Page == CurrentPage)
        {
            return;
        }

        //se a pagina não estava habilitada não faz nada
        if (!link.Enabled)
        {
            return;
        }

        //definimos a pagina atual para o link que foi clicado
        CurrentPage = link.Page;
        //Passa o número da pagina a selecionar
        //faz com que seja enviada um request a API solicitando a informação da nova pagina
        await SelectedPage.InvokeAsync(link.Page);
    }

    protected override void OnParametersSet()
    {
        CarregaPaginas();
    }


    private void CarregaPaginas()
    {
        links = new List<LinkModel>();

        //tratar o link da pagina anterior
        var isLinkPaginaAnteriorHabilitado = CurrentPage != 1;
        var paginaAnterior = CurrentPage - 1;

        links.Add(new LinkModel(paginaAnterior, isLinkPaginaAnteriorHabilitado, "Anterior"));

        //trata os links das paginas especificas
        for (int i = 1; i <= QuantityTotalPages; i++)
        {
            if (i >= CurrentPage - Ray && i <= CurrentPage + Ray)
            {
                links.Add(new LinkModel(i)
                    {
                        Active = CurrentPage == i
                    });
            }
        }

        //trata o link para a proxima pagina
        var isLinkProximaPaginaHabilitado = CurrentPage != QuantityTotalPages;
        var proximaPagina = CurrentPage + 1;

        links.Add(new LinkModel(proximaPagina, isLinkProximaPaginaHabilitado, "Próximo"));
    }

}
 