@page "/"
@inject NavigationManager navigationManager


Home Page
@* <style type="text/css">
    .card {
        display: flex;s
        flex-direction: column;
        justify-content: space-between;
        border: 1px solid lightgray;
        box-shadow: 2px 2px 8px 4px #d3d3d3d1;
        border-radius: 15px;
        font-family: sans-serif;
        margin: 5px;
    }
</style> *@

@*@if (lProducts is null)
{
    <div class="text-center">
        <div role="status">
            <svg aria-hidden="true" class="inline h-8 w-8 animate-spin fill-blue-600 text-gray-200 dark:text-gray-600" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor" />
                <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill" />
            </svg>
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
        <div>
            <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar producto..." @bind-value="Filter" />
        </div>
        <div class="mx-1">
            <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
        </div>
        <AuthorizeView>
            <Authorized>
                @if (counter > 0)
                {
                    <a href="/Orders/ShowCart" class="btn btn-primary">Ver Carro de Compras (@counter)</a>
                }
            </Authorized>
        </AuthorizeView>
    </div>

    <Pagination CurrentPage="CurrentPage"
                QuantityTotalPages="TotalPages"
                Ray="2"
                SelectedPage="SelectedPageAsync" />

    <div class="row row-cols-1 row-cols-md-4 g-4 mt-1">
        @foreach (var product in lProducts!)
        {
            <div class="col">User.IsInRole
                <div class="card h-100">
                    <div class="zoom text-center">
                        <img src="@product.MainImage" style="height:150px; max-width:200px;" class="text-center" alt=@product.Name />
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-navy"> @product.Name</h5>
                        <p class="card-text smfnt">@product.Description</p>
                        <h5 class="text-muted">@($"{product.Price:C2}")</h5>
                    </div>
                    <div class="card-footer text-center">
                        <a href="/orders/details/@product.Id" class="btn btn-sm btn-secondary"><i class="oi oi-info" /> Detalles</a>
                        <button class="btn btn-sm btn-primary" @onclick=@(() => AddToCartAsync(product.Id))><i class="oi oi-plus" /> Agregar al Carro</button>
                    </div>
                </div>
            </div>
        }
    </div>
}*@

@code {

    private List<string> Images;



    // private int CurrentPage = 1;
    // private int TotalPages;
    // private int counter = 0;
    private bool isAuthenticated;

    // public List<Product>? lProducts { get; set; }

    // [Parameter]
    // [SupplyParameterFromQuery]
    // public string Page { get; set; } = "";

    // [Parameter]
    // [SupplyParameterFromQuery]
    // public string Filter { get; set; } = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;


    protected async override Task OnParametersSetAsync()
    {
        await CheckIsAuthenticatedAsync();
        // await LoadCounterAsync();
    }

    private async Task CheckIsAuthenticatedAsync()
    {
        // var authenticationState = await authenticationStateTask;
        // isAuthenticated = authenticationState.User.Identity!.IsAuthenticated;
    }

    // private async Task LoadCounterAsync()
    // {
    //     if (!isAuthenticated)
    //     {
    //         return;
    //     }

    //     var responseHttp = await repository.Get<int>("/api/temporalSales/count");
    //     if (responseHttp.Error)
    //     {
    //         return;
    //     }
    //     counter = responseHttp.Response;
    // }

    // private async Task SelectedPageAsync(int page)
    // {
    //     CurrentPage = page;
    //     await LoadAsync(page);
    // }

    // private async Task LoadAsync(int page = 1, int QuantityPerPage = 10)
    // {
    //     try
    //     {

    //         var responseHttp = await repository.Get<List<Product>>($"/api/products?Page={page}&QuantityPerPage={QuantityPerPage}&filter={Filter}");
    //         if (!responseHttp.Error)
    //         {
    //             TotalPages = responseHttp.TotalPages;
    //             lProducts = responseHttp.Response;

    //         }
    //     }
    //     catch (Exception e)
    //     {
    //         await sweetAlertService.FireAsync("Error", e.Message, SweetAlertIcon.Error);
    //     }
    // }

    // private async Task CleanFilterAsync()
    // {
    //     Filter = string.Empty;
    //     await ApplyFilterAsync();
    // }

    // private async Task ApplyFilterAsync()
    // {
    //     int page = 1;
    //     await LoadAsync(page);
    //     await SelectedPageAsync(page);
    // }

    // private async Task AddToCartAsync(int productId)
    // {
    //     if (!isAuthenticated)
    //     {
    //         navigationManager.NavigateTo("/Login");
    //         var toast1 = sweetAlertService.Mixin(new SweetAlertOptions
    //             {
    //                 Toast = true,
    //                 Position = SweetAlertPosition.TopEnd,
    //                 ShowConfirmButton = false,
    //                 Timer = 5000
    //             });
    //         await toast1.FireAsync(icon: SweetAlertIcon.Error, message: "Debes haber iniciado sesión para poder agregar productos al carro de compras.");
    //         return;
    //     }

    //     var temporalSaleDTO = new TemporalSaleDTO
    //         {
    //             ProductId = productId
    //         };

    //     var httpResponse = await repository.Post("/api/temporalSales", temporalSaleDTO);
    //     if (httpResponse.Error)
    //     {
    //         var message = await httpResponse.GetErrorMessageAsync();
    //         await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
    //         return;
    //     }

    //     await LoadCounterAsync();

    //     var toast2 = sweetAlertService.Mixin(new SweetAlertOptions
    //         {
    //             Toast = true,
    //             Position = SweetAlertPosition.TopEnd,
    //             ShowConfirmButton = false,
    //             Timer = 5000
    //         });
    //     await toast2.FireAsync(icon: SweetAlertIcon.Success, message: "Producto agregado al carro de compras.");
    // }
}
