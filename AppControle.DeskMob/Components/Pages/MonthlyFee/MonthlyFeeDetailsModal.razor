@* @inject IRepository repository
@inject SweetAlertService sweetAlertService


<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmitCategory">
    <DataAnnotationsValidator />
    
    Modal

</EditForm>

@code {

    [Parameter]

    public MonthlyFee MonthlyFee { get; set; } = new()!;

    private EditContext editContext = null!;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override void OnInitialized()
    {
        editContext = new(MonthlyFee);
    }
    private async void OnValidSubmitCategory()
    {
        // var httpResponse = await repository.Post("/api/Categories", Category);

        // if (httpResponse.Error)
        // {
        //     var message = await httpResponse.GetErrorMessageAsync();
        //     await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        // }
        // else
        // {
        //     //TODO: Unificar Toast
        //     var toast = sweetAlertService.Mixin(new SweetAlertOptions
        //         {
        //             Toast = true,
        //             Position = SweetAlertPosition.TopEnd,
        //             ShowConfirmButton = true,
        //             Timer = 5000
        //         });
        //     await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Categoria adicionada com sucesso!");
        //     Category.Name = "";
        // }
        // await BlazoredModal.CloseAsync(ModalResult.Ok());
    }
    private async void DeteleMonthlyFee(int id)
    {

        // var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        //     {
        //         Title = "Confirmaçao",
        //         Text = string.Format("Deseja excluir a categoria {0}?", name),
        //         Icon = SweetAlertIcon.Question,
        //         ShowCancelButton = true,
        //         CancelButtonText = "Não",
        //         ConfirmButtonText = "Sim"
        //     });

        // var confirm = string.IsNullOrEmpty(result.Value);
        // if (confirm)
        // {
        //     return;
        // }

        // var responseHttp = await repository.Delete($"/api/categories/{categoryId}");
        // if (responseHttp.Error)
        // {
        //     if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
        //     {
        //         var message = await responseHttp.GetErrorMessageAsync();
        //         await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
        //         return;
        //     }
        // }
        // else
        // {
        //     lCategory.Remove(lCategory.Where(x => x.Id == categoryId).FirstOrDefault()!);
        //     StateHasChanged();
        //     var toast = sweetAlertService.Mixin(new SweetAlertOptions
        //         {
        //             Toast = true,
        //             Position = SweetAlertPosition.TopEnd,
        //             ShowConfirmButton = true,
        //             Timer = 5000
        //         });
        //     await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Categoria excluida!");
        // }
    }
    private async void ReturnAction()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }
}   *@