@* @inject IRepository repository
@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmitValidation">
    <DataAnnotationsValidator />


    <form class="mt-5 space-y-12  pe-3 sm:pe-5 ps-3 sm:ps-5">

        <div class="border-b border-t border-gray-900/10 pb-12">
            <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-8">

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="Name" class="block text-sm font-medium leading-6 text-gray-900">* Nome</label>
                    <div class="mt-2">
                        <InputText name="Name" id="Name" @bind-Value="@ProductDTO.Name" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="text-red-500 font-bold" For="@(() => ProductDTO.Name)" />
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-4">
                    <label for="Description" class="block text-sm font-medium leading-6 text-gray-900">Descrição</label>
                    <div class="mt-2">
                        <InputText name="Description" id="Description" @bind-Value="@ProductDTO.Description" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="text-red-500 font-bold" For="@(() => ProductDTO.Description)" />
                    </div>
                </div>

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="Price" class="block text-sm font-medium leading-6 text-gray-900">* Preço</label>
                    <div class="mt-2">
                        <InputNumber name="Price" id="Price" @bind-Value="@ProductDTO.Price" class="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="text-red-500 font-bold" For="@(() => ProductDTO.Price)" />
                    </div>
                </div>
                <!-- -->
                <div class="sm:col-span-4 md:col-span-2 grid content-center place-items-end">
                    <div class="mt-2">
                        <button @onclick=@(()=>ShowModalCategory()) class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">
                            Adicionar categoria
                        </button>
                    </div>
                </div>


                <div class="sm:col-span-4 md:col-span-4 ">
                    <div class="mb-3">
                        <label for="bairro" class="block text-sm font-medium leading-6 text-gray-900">Categorias</label>
                        <div>
                            <MultipleSelector NonSelected="NonSelectedCategories" Selected="SelectedCategories" />
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </form>

    <div class="mt-6 flex items-center justify-end gap-x-6 mb-5 me-5">
        <button type="button" @onclick="ReturnAction" class="text-sm font-semibold leading-6 text-gray-900">Cancel</button>
        <button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Salvar</button>
    </div>

</EditForm>

@code {

    private EditContext editContext = null!;

    [Parameter]
    public string? imageBase64 { get; set; } = null;

    [Parameter]
    public bool IsEdit { get; set; } = false;

    [EditorRequired]
    [Parameter]
    public ProductDTO ProductDTO { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public List<Category> lCategory { get; set; } = new();

    public List<MultipleSelectorModel> SelectedCategories = new();
    public List<MultipleSelectorModel> NonSelectedCategories = new();

    public bool FormPostedSuccessfully { get; set; } = false;

    [CascadingParameter]
    IModalService CategoryModal { get; set; } = default!;

    async Task OnChangeInputFile(InputFileChangeEventArgs e)
    {
        imageBase64 = null;
        var imagenes = e.GetMultipleFiles();
        foreach (var imagen in imagenes)
        {
            var arrBytes = new byte[imagen.Size];
            await imagen.OpenReadStream().ReadAsync(arrBytes);
            imageBase64 = Convert.ToBase64String(arrBytes);
        }
    }
    private void AddImageToList()
    {
        if (imageBase64 is not null)
        {
            ProductDTO.ProductImages?.Add(imageBase64);
        }
    }
    protected async override Task OnInitializedAsync()
    {
        await LoadCategory();
    }
    private async Task LoadCategory()
    {
        var httpResponse = await repository.GetNoPage<List<Category>>("/api/categories");
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        lCategory = httpResponse.Response!;
        SelectedCategories = new();
        NonSelectedCategories = new();
        MultipleSelectorModel SelectorModel;
        foreach (var category in lCategory)
        {
            SelectorModel = new MultipleSelectorModel(category.Id.ToString(), category.Name);
            if (IsEdit)
            {
                var found = ProductDTO!.ProductCategoryIds!.FirstOrDefault(x => x == category.Id);
                if (found != 0)
                {
                    SelectedCategories.Add(SelectorModel);
                }
                else
                {
                    NonSelectedCategories.Add(SelectorModel);
                }
            }
            else
            {
                SelectorModel = new MultipleSelectorModel(category.Id.ToString(), category.Name);
                NonSelectedCategories.Add(SelectorModel);
            }
        }

    }
    protected override void OnInitialized()
    {

        editContext = new(ProductDTO);

    }
    private async Task OnValidSubmitValidation()
    {
        ProductDTO.ProductCategoryIds = SelectedCategories.Select(x => int.Parse(x.Key)).ToList();
        await OnValidSubmit.InvokeAsync();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
    private async void ShowModalCategory()
    {
        IModalReference modalReference;

        modalReference = CategoryModal.Show<ProductsCategoryModal>(string.Empty, new ModalParameters().Add("lCategory", lCategory));

        var result = await modalReference.Result;

        if (result.Confirmed)
        {
            await LoadCategory();
            StateHasChanged();
        }
    }

}
 *@