@page "/Register"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService


<EditForm Model="UserDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator /> 

    <div class="mb-2 mt-5 flex justify-end pe-3 xl:justify-center sm:pe-5">

        <h2 class="leading-7 text-xl font-bold text-gray-900">Criar novo usuário</h2>
    </div>

    <form class="space-y-12 pe-3 ps-3 sm:pe-5 sm:ps-5">
        <div class="border-gray-900/10 border-b border-t pb-12">
            

            <div class="grid-cols-1 mt-10 grid gap-x-6 gap-y-8 sm:grid-cols-8">

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="cpf_cnpj" class="leading-6 block text-sm font-medium text-gray-900">* CFP / CNPJ</label>
                    <div class="mt-2">
                        <InputText name="cpf_cnpj" id="cpf_cnpj" @bind-Value="@UserDTO.Cpf_Cnpj" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Cpf_Cnpj)" />
                    </div>
                </div>

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="rg_ie" class="leading-6 block text-sm font-medium text-gray-900">RG / IE</label>
                    <div class="mt-2">
                        <InputText name="rg_ie" id="rg_ie" @bind-Value="@UserDTO.Rg_Ie" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Rg_Ie)" />
                    </div>
                </div>

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="name" class="leading-6 block text-sm font-medium text-gray-900">* Name</label>
                    <div class="mt-2">
                        <InputText name="name" id="name" @bind-Value="@UserDTO.Name" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Name)" />
                    </div>
                </div>

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="fantasyname" class="leading-6 block text-sm font-medium text-gray-900">Nome Fantasia</label>
                    <div class="mt-2">
                        <InputText name="fantasyname" id="fantasyname" @bind-Value="@UserDTO.FantasyName" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.FantasyName)" />
                    </div>
                </div>                
                <!-- -- -->
                <div class="sm:col-span-4">
                    <div class="grid-cols-3 grid">
                        <div class="col-span-2">
                            <label for="address" class="leading-6 block text-sm font-medium text-gray-900">Endereço</label>
                            <div class="mt-2">
                                <InputText name="address" id="address" @bind-Value="@UserDTO.Address" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                                <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Address)" />
                            </div>
                        </div>

                        <div class="col-span-1 pl-2 sm:pl-5">
                            <label for="addressnumber" class="leading-6 block text-sm font-medium text-gray-900">N°</label>
                            <div class="mt-2">
                                <InputNumber name="addressnumber" id="addressnumber" @bind-Value="@UserDTO.AddressNumber" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                                <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.AddressNumber)" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="cep" class="leading-6 block text-sm font-medium text-gray-900">CEP</label>
                    <div class="mt-2">
                        <InputText name="cep" id="cep" @bind-Value="@UserDTO.AddressCep" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.AddressCep)" />
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="bairro" class="leading-6 block text-sm font-medium text-gray-900">Bairro</label>
                    <div class="mt-2">
                        <InputText name="bairro" id="bairro" @bind-Value="@UserDTO.Neighborhood" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Neighborhood)" />
                    </div>
                </div>
                <!-- -- -->
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="cep" class="leading-6 block text-sm font-medium text-gray-900">Pais</label>
                    <div class="mt-2">
                        <select id="country" name="country" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" @onchange="CountryChangedAsync">
                            <option value="0">-- Selecione um Pais --</option>
                            @if (countries is not null)
                            {
                                @foreach (var country in countries)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="cep" class="leading-6 block text-sm font-medium text-gray-900">Estado</label>
                    <div class="mt-2">
                        <select id="country" name="country" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" @onchange="StateChangedAsync">
                            <option value="0">-- Selecione um Estado --</option>
                            @if (states is not null)
                            {
                                @foreach (var state in states)
                                {
                                    <option value="@state.Id">@state.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="cep" class="leading-6 block text-sm font-medium text-gray-900">Cidade</label>
                    <div class="mt-2">
                        <select id="country" name="country" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" @bind="UserDTO.CityId" >
                            <option value="0">-- Selecione uma Cidade --</option>

                            @if (cities is not null)
                            {
                                @foreach (var city in cities)
                                {
                                    <option value="@city.Id">@city.Name</option>
                                }
                            }
                        </select>
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.CityId)" />
                    </div>
                </div>

                <!-- -->
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="email" class="leading-6 block text-sm font-medium text-gray-900">* Email</label>
                    <div class="mt-2">
                        <InputText name="email" id="email" @bind-Value="@UserDTO.Email" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Email)" />
                    </div>
                </div>

                <div class="sm:col-span-4 md:col-span-2">
                    <label for="addressnuphoneNumbermber" class="leading-6 block text-sm font-medium text-gray-900">Telefone</label>
                    <div class="mt-2">
                        <InputText name="phoneNumber" id="phoneNumber" @bind-Value="@UserDTO.PhoneNumber" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.PhoneNumber)" />
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="password" class="leading-6 block text-sm font-medium text-gray-900">* Senha</label>
                    <div class="mt-2">
                        <InputText type="password" id="password" name="password" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6" @bind-Value="@UserDTO.Password" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.Password)" />
                    </div>
                </div>
                <div class="sm:col-span-4 md:col-span-2">
                    <label for="confirmpassword" class="leading-6 block text-sm font-medium text-gray-900">* Confirmação de Senha</label>
                    <div class="mt-2">
                        <InputText type="password" id="confirmpassword" name="confirmpassword" class="border-0 ring-1 block w-full rounded-md py-1.5 text-gray-900 shadow-sm ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6" @bind-Value="@UserDTO.PasswordConfirm" />
                        <ValidationMessage class="font-bold text-red-500" For="@(() => UserDTO.PasswordConfirm)" />
                    </div>
                </div>

                <!-- -->
                <div class="sm:col-span-4">
                    <label class="mb-2 block text-sm font-medium text-gray-900 dark:text-white" for="file_input">Selecione a imagem</label>
                    <InputFile OnChange="OnChangeInputFile" accept=".jpg,.jpeg,.png" class="block w-full cursor-pointer rounded-lg border border-gray-300 bg-gray-50 text-sm text-gray-900 focus:outline-none dark:text-gray-400 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400" id="file_input" />
                </div>

            </div>
        </div>
    </form>

    <div class="mb-5 me-5 mt-6 flex items-center justify-end gap-x-6">
        <a type="button" href="/" class="leading-6 text-sm font-semibold text-gray-900">Cancel</a>
        <button type="submit" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Salvar</button>
    </div>

</EditForm>


 
@code {
    private UserDTO UserDTO = new();
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;

    [Parameter]
    [SupplyParameterFromQuery]
    public bool IsAdmin { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
    }

    private void ImageSelected(string imagenBase64)
    {
        UserDTO.Photo = imagenBase64;
    }

    async Task OnChangeInputFile(InputFileChangeEventArgs e)
    {
        var imagenes = e.GetMultipleFiles();

        foreach (var imagen in imagenes)
        {
            var arrBytes = new byte[imagen.Size];
            await imagen.OpenReadStream().ReadAsync(arrBytes);
            var imageBase64 = Convert.ToBase64String(arrBytes);
            // ImageURL = null;
            UserDTO.Photo = imageBase64;
            // await ImageSelected.InvokeAsync(imageBase64);
            // StateHasChanged();
        }
    }
     
    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries/combobox");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            // await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
    }

    private async Task CountryChangedAsync(ChangeEventArgs e)
    {
        var selectedCountry = Convert.ToInt32(e.Value!);
        await LoadStatesAsyn(selectedCountry);
    }

    private async Task LoadStatesAsyn(int countryId)
    {
        var responseHttp = await repository.Get<List<State>>($"/api/states/combobox/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            // await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        states = responseHttp.Response;
    }

    private async Task StateChangedAsync(ChangeEventArgs e)
    {
        var selectedState = Convert.ToInt32(e.Value!);
        await LoadCitiesAsyn(selectedState);
    }

    private async Task LoadCitiesAsyn(int stateId)
    {
        var responseHttp = await repository.Get<List<City>>($"/api/cities/combobox/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            // await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        cities = responseHttp.Response;
    }

    private async Task CreteUserAsync()
    {
        UserDTO.UserName = UserDTO.Email;
        UserDTO.UserType = UserType.User;
        // if (IsAdmin)
        // {
        //     UserDTO.UserType = UserType.Admin;
        // }
        // else
        // {
        //     UserDTO.UserType = UserType.User;
        // }
        var responseHttp = await repository.Post<UserDTO>("/api/accounts/CreateUser", UserDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        await sweetAlertService.FireAsync("Confirmação", "Sua conta foi criada com sucesso. Foi enviado um e-mail com instruções para ativar seu usuário.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/");
    }
}
 